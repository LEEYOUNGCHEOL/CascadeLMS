**** Computer Science CourseWare Installation Instructions *****
by Mike Helmick - mike.helmick@gmail.com

           **** SOFTWARE LICENSE - New BSD License ****
Copyright (c) 2006-2010, Mike Helmick - mike.helmick@gmail.com
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

 - Redistributions of source code must retain the above copyright notice, 
   this list of conditions and the following disclaimer.
 - Redistributions in binary form must reproduce the above copyright notice, 
   this list of conditions and the following disclaimer in the documentation 
   and/or other materials provided with the distribution.
 - Neither the name of the Mike Helmick, Miami University nor the names of its
   contributors may be used to endorse or promote products derived from this 
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
POSSIBILITY OF SUCH DAMAGE.

These instructions are meant to be followed in order, there is no quick install option.

Part 1 - Prerequisites

Computer Science CourseWare (hereafter CSCW) is know to run on both Mac OS X and Linux.   
At least one of the third party libraries used is not currently compatible with any
Windows based operating system.

* Installation on Mac OS X seems to go smoother
* Feel free to substitute pre-built packages instead of building from source, it could save you time


This document assumes that you are stating with a basic working server configuration 
including:
 * Apache 2 with mod_proxy_balancer and mod_rewrite
 * Mysql 4 or 5
 * Subversion with SSL support
 * Open LDAP (with headers)
 * Open SSL (with headers)
 * A c/c++ compiler (gcc)
 * curl (to download some of the setup files)
 * GNU Enscript
 * Java 5.0+ (1.5+)

And that you have SUDO access

You will be installing Ruby 1.8.6 and Rails 2.0.x 
A few third party add-ons to Ruby will also be installed, again please try to follow this document
in order.

Part 2 - Installation

Step 01 - Setup Path

 Check your path - make sure that /usr/local/bin is in your path

# echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

 If it is NOT in your path

Add this line to your ~/.bash_login file

export PATH="/usr/local/bin:/usr/local/sbin:$PATH"

Step 02 - Install Ruby

Set up your src directory

cd ~
mkdir src
chmod -R 775 src/
cd src

** You can change "src" in the above script, whatever directory you like, just remember it later.

Install Readline (Required for Ruby)

curl -O ftp://ftp.gnu.org/gnu/readline/readline-5.1.tar.gz
tar xzvf readline-5.1.tar.gz
cd readline-5.1
./configure --prefix=/usr/local
make
sudo make install
cd ..

Install ncurses 

curl -O http://ftp.gnu.org/pub/gnu/ncurses/ncurses-5.6.tar.gz
tar -xzvf ncurses-5.6.tar.gz
cd 
ncurses-5.6
./configure --prefix=/usr/local
make
sudo make install
cd ..

Install Ruby 1.8.6 

curl -O ftp://ftp.ruby-lang.org/pub/ruby/1.8/ruby-1.8.6.tar.gz
tar xzvf ruby-1.8.6.tar.gz
cd ruby-1.8.6
./configure --prefix=/usr/local --enable-pthread --with-readline-dir=/usr/local --enable-shared
make
sudo make install
sudo make install-doc
cd ..

Verify Ruby install

# ruby -v
ruby 1.8.6 (2007-03-13 patchlevel 0) [i686-linux]

Install Ruby Gems

curl -O http://files.rubyforge.mmmultiworks.com/rubygems/rubygems-0.9.4.tgz
tar xzvf rubygems-0.9.4.tgz
cd rubygems-0.9.4
sudo /usr/local/bin/ruby setup.rb
cd ..

Install Ruby on Rails (current release - currently 1.2.3)

sudo gem install rails --include-dependencies

Install the Ruby daemons and slave gems

sudo gem install daemons slave

Install Mongrel (Ruby Web server)

sudo gem install daemons gem_plugin mongrel mongrel_cluster --include-dependencies

When prompted, select mongrel 1.0.1 (ruby) and fastthread 1.0 (ruby)

Install the MySQL native extensions
* not required - but will considerably boost performance

sudo gem install mysql

Install the Ruby LDAP library 
** OpenSSL and LDAP development libraries must be installed already

cd ~/src
curl -O http://easynews.dl.sourceforge.net/sourceforge/ruby-ldap/ruby-ldap-0.9.7.tar.gz
tar -xzvf ruby-ldap-0.9.7.tar.gz
cd ruby-ldap-0.9.7
ruby extconf.rb
make
sudo make install

Install RedCloth - Text formatting

sudo gem install RedCloth

Install Diff-LCS - for running diff reports

sudo gem install diff-lcs

Install railstat - Statistics on running application

sudo gem install rail_stat_generator

Install chronic and package (dependencies for autograding)

sudo gem install chronic packet

Install the twitter gem

sudo gem install twitter



** At this point we are ready to actually install and configure the application.
You need to decide where to install it, we recommend the path /srv/www/rails/cscourseware/

sudo mkdir -p /srv/www/rails/cscourseware
cd /srv/www/rails/cscourseware
sudo mkdir storage
sudo svn co https://mikehelmick.com/svn/cscourseware/trunk current


Part 3 - Configuration

Create the database

mysqladmin -u root -p create cscourseware_production

Create the user for the database - you will need to do this in MySQL
-- You can create your own username and password by filling in the details below

mysql -u root -p
grant all on cscourseware_production.* to DATABASEUSER@localhost identified by 'PASSWORD';

Change CSCW datase configuration

cd /srv/www/rails/cscourseware/current/config/
sudo cp database.yml.todo database.yml

Edit the database.yml file and configure the production database settings with the user you just created

Load the Database

export RAILS_ENV=production
cd ../
rake db:migrate

Create user - accoding to http://mongrel.rubyforge.org/docs/mongrel_cluster.html
We are going to add a mongrel user to run the application under, since we don't need to run as root

sudo /usr/sbin/adduser --disabled-login mongrel
cd /srv/www/rails/
sudo chown -R mongrel:mongrel cscourseware/

Configure mongrel to autoboot (linux specific instructions)
* You will need to adjust the path of the last command depending on versions
* This will configure mongrel to launch any rails applications that are configured in /etc/mongrel_cluster 

sudo mkdir /etc/mongrel_cluster
sudo ln -s /srv/www/rails/cscourseware/current/config/mongrel_cluster.yml /etc/mongrel_cluster/cscourseware.yml
sudo cp /usr/local/lib/ruby/gems/1.8/gems/mongrel_cluster-1.0.2/resources/mongrel_cluster /etc/init.d/

Confiugre mongrel to start automatically
If we are using a RedHat like system we can configure mongrel_cluster for startup:
  sudo /sbin/chkconfig --level 345 mongrel_cluster on

For users of Debian (or Ubuntu), you can use this command to install the script:
  sudo /usr/sbin/update-rc.d -f mongrel_cluster defaults

Now - CS Courseware will boot automatically for you,
but we need to set paths correctly so that the mongrel user can find the correct version of Ruby

Edit the .bash_login file for the mongrel user

sudo -u mongrel vi /home/mongrel/.bash_login

and add this line

export PATH="/usr/local/bin:/usr/local/sbin:$PATH"

Configure Apache
* The Apache/Mod_proxy/Mongrel can go two different ways - alias or virtual server
* The virtual server configuration is recommended

--Alias style configuration
* Add this to your /etc/apache2/apache2.conf

Alias /cscw/ "/srv/www/rails/cscourseware/current/public/"

RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f
RewriteRule ^/(.*)$ balancer://mongrel_cluster%{REQUEST_URI} [P,QSA,L]

<Proxy balancer://mongrel_cluster>
   BalancerMember http://127.0.0.1:8000
   BalancerMember http://127.0.0.1:8001
   BalancerMember http://127.0.0.1:8002
   BalancerMember http://127.0.0.1:8003
</Proxy>

<Directory "/srv/www/rails/cscourseware/current/public/">
     Options ExecCGI FollowSymLinks
     AllowOverride all
     Allow from all
     Order allow,deny
</Directory>


* You will also need to add this line to the /srv/www/rails/cscourseware/current/public/.htaccess file

RewriteBase /cscw 



--Virtual Host Configuration
The location of this conf depends on your Apache 2 build configuration.   
In our configuration, we created the file cscourseware.conf in the 
/etc/apache2/sites-enabled directory

Add these lines - we've put it some extras if you need them.
Also - SSL is recommended, configure according to the Apache documentation
And - you will need to set the appropriate server name, and configure DNS correctly

<VirtualHost *>
  ServerName cscw.muohio.edu
  DocumentRoot /srv/www/rails/cscourseware/current/public

  <Directory "/srv/www/rails/cscourseware/current/public">
    Options FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
  </Directory>

  RewriteEngine On

  # Uncomment for rewrite debugging
  #RewriteLog logs/myapp_rewrite_log
  #RewriteLogLevel 9
  
  # Check for maintenance file and redirect all requests
  #  ( this is for use with Capistrano's disable_web task )
  RewriteCond %{DOCUMENT_ROOT}/system/maintenance.html -f
  RewriteCond %{SCRIPT_FILENAME} !maintenance.html
  RewriteRule ^.*$ /system/maintenance.html [L]

  # Rewrite index to check for static
  RewriteRule ^/$ /index.html [QSA] 

  # Rewrite to check for Rails cached page
  RewriteRule ^([^.]+)$ $1.html [QSA]

  # Redirect all non-static requests to cluster
  RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f
  RewriteRule ^/(.*)$ balancer://mongrel_cluster%{REQUEST_URI} [P,QSA,L]

  <Proxy balancer://mongrel_cluster>
    BalancerMember http://127.0.0.1:8000
    BalancerMember http://127.0.0.1:8001
    BalancerMember http://127.0.0.1:8002
    BalancerMember http://127.0.0.1:8003
  </Proxy>

  # Deflate
  AddOutputFilterByType DEFLATE text/html text/plain text/css
  # ... text/xml application/xml application/xhtml+xml text/javascript
  BrowserMatch ^Mozilla/4 gzip-only-text/html
  BrowserMatch ^Mozilla/4.0[678] no-gzip
  BrowserMatch \bMSIE !no-gzip !gzip-only-text/html

  #DeflateFilterNote Input input_info
  #DeflateFilterNote Output output_info
  #DeflateFilterNote Ratio ratio_info
  #LogFormat '"%r" %{output_info}n/%{input_info}n (%{ratio_info}n%%)' deflate
  #CustomLog logs/myapp_deflate_log deflate
</VirtualHost>


## start mongrel and restart apache

sudo /etc/init.d/mongrel_cluster start
sudo /etc/init.d/apache2 restart

The app should not be working!!! 
Hit your virtual server
   http://cscw.muohio.edu

in the example above

Part 5 - Application Configuration

Log in to CSCW using the 
 username: admin
 password: password

Immeadiatly click on "admin admin" in the upper right hand corner to change your password and assign 
a valid email address to the admin user

Click on "Adminstration -> Settings"
* This will let you configure display options, title, organization, email addresses, etc...
******** Please configure an appropriate error reporting email address

Also be sure to configure the appropriate location of your Java compiler and JVM, as
well as the Ruby interpreter that can be called externally.

There is also a configuration option for external storage - be sure to 
configure this and make it a secure location, we suggest
  /srv/www/rails/cscourseware/storage


You can now create users and courses from the administration tab


Part 7 - Upgrading to new Releases

To upgrade to a new release

cd /srv/www/rails/cscourseware/current
sudo -u mongrel svn update
export RAILS_ENV=production
sudo -u mongrel rake db:update
sudo /etc/init.d/mongrel_cluster restart
