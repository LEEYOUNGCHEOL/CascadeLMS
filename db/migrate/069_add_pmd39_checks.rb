class AddPmd39Checks < ActiveRecord::Migration
  def self.up
    
    StyleCheck.create :name => 'StringBufferInstantiationWithChar', :description => 'StringBuffer sb = new StringBuffer(\'c\'); The\nchar will be converted into int to intialize\nStringBuffer size.',  :example => 'class&nbsp;Foo&nbsp;{\n&nbsp;&nbsp;StringBuffer&nbsp;sb1&nbsp;=&nbsp;new&nbsp;StringBuffer(\'c\');&nbsp;//Bad\n&nbsp;&nbsp;StringBuffer&nbsp;sb2&nbsp;=&nbsp;new&nbsp;StringBuffer("c");&nbsp;//Better\n}'
    StyleCheck.create :name => 'UseCollectionIsEmpty', :description => 'The isEmpty() method on java.util.Collection is provided to see if a collection has any elements.\nComparing the value of size() to 0 merely duplicates existing behavior.',  :example => 'public&nbsp;class&nbsp;Foo&nbsp;{\n		void&nbsp;good()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	List&nbsp;foo&nbsp;=&nbsp;getList();\n			if&nbsp;(foo.isEmpty())&nbsp;{\n				//&nbsp;blah\n			}\n&nbsp;&nbsp;&nbsp;&nbsp;	}\n\n	&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;bad()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;List&nbsp;foo&nbsp;=&nbsp;getList();\n				if&nbsp;(foo.size()&nbsp;==&nbsp;0)&nbsp;{\n					//&nbsp;blah\n				}\n	&nbsp;&nbsp;&nbsp;&nbsp;	}\n	}'
    StyleCheck.create :name => 'NcssTypeCount', :description => '',  :example => 'public&nbsp;class&nbsp;Foo&nbsp;extends&nbsp;Bar&nbsp;{\n&nbsp;public&nbsp;Foo()&nbsp;{\n&nbsp;//this&nbsp;class&nbsp;only&nbsp;has&nbsp;6&nbsp;NCSS&nbsp;lines\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.foo();\n&nbsp;}\n}'
    StyleCheck.create :name => 'NcssConstructorCount', :description => '',  :example => 'public&nbsp;class&nbsp;Foo&nbsp;extends&nbsp;Bar&nbsp;{\n&nbsp;public&nbsp;Foo()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;//this&nbsp;constructor&nbsp;only&nbsp;has&nbsp;1&nbsp;NCSS&nbsp;lines\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.foo();\n&nbsp;}\n}'
    StyleCheck.create :name => 'BigIntegerInstantiation', :description => 'Don\'t create instances of already existing BigInteger\n(BigInteger.ZERO, BigInteger.ONE) and for 1.5 on,\nBigInteger.TEN and BigDecimal (BigDecimal.ZERO,\nBigDecimal.ONE, BigDecimal.TEN)',  :example => 'public&nbsp;class&nbsp;Test&nbsp;{\n\n&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\n&nbsp;&nbsp;&nbsp;BigInteger&nbsp;bi=new&nbsp;BigInteger(1);\n&nbsp;&nbsp;&nbsp;BigInteger&nbsp;bi2=new&nbsp;BigInteger("0");\n&nbsp;&nbsp;&nbsp;BigInteger&nbsp;bi3=new&nbsp;BigInteger(0.0);\n&nbsp;&nbsp;&nbsp;BigInteger&nbsp;bi4;\n&nbsp;&nbsp;&nbsp;bi4=new&nbsp;BigInteger(0);\n&nbsp;}\n}'
    StyleCheck.create :name => 'AvoidUsingOctalValues', :description => 'Integer literals should not start with zero.\n    Zero means that the rest of literal will be interpreted as an octal value.',  :example => 'public&nbsp;class&nbsp;Foo&nbsp;{\n&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;012;&nbsp;//&nbsp;set&nbsp;i&nbsp;with&nbsp;10&nbsp;not&nbsp;12\n&nbsp;&nbsp;int&nbsp;j&nbsp;=&nbsp;010;&nbsp;//&nbsp;set&nbsp;j&nbsp;with&nbsp;8&nbsp;not&nbsp;10\n&nbsp;&nbsp;k&nbsp;=&nbsp;i&nbsp;*&nbsp;j;&nbsp;//&nbsp;set&nbsp;k&nbsp;with&nbsp;80&nbsp;not&nbsp;120\n}'
    StyleCheck.create :name => 'NPathComplexity', :description => 'The NPath complexity of a method is the number of acyclic execution paths through that method.\n   A threshold of 200 is generally considered the point where measures should be taken to reduce complexity.',  :example => 'public&nbsp;class&nbsp;Foo&nbsp;{\n&nbsp;&nbsp;void&nbsp;bar()&nbsp;{\n&nbsp;&nbsp;&nbsp;//&nbsp;lots&nbsp;of&nbsp;complicated&nbsp;code\n&nbsp;&nbsp;}\n&nbsp;}'
    StyleCheck.create :name => 'NcssMethodCount', :description => '',  :example => 'public&nbsp;class&nbsp;Foo&nbsp;extends&nbsp;Bar&nbsp;{\n&nbsp;public&nbsp;int&nbsp;methd()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.methd();\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;//this&nbsp;method&nbsp;only&nbsp;has&nbsp;1&nbsp;NCSS&nbsp;lines\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1;\n&nbsp;}\n}'
    
  end

  def self.down
  end
end
